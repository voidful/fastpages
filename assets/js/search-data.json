{
  
    
        "post0": {
            "title": "Controllable generation via RL to let Elon Musk speak ill of DOGE",
            "content": "from textrl import TextRLEnv,TextRLActor from transformers import pipeline, AutoModelForTokenClassification, AutoTokenizer, AutoModelWithLMHead import logging import sys import pfrl import torch logging.basicConfig(level=logging.INFO, stream=sys.stdout, format=&#39;&#39;) . Using a pre-trained model, it can generate elonmusk&#39;s style tweets. . tokenizer = AutoTokenizer.from_pretrained(&quot;huggingtweets/elonmusk&quot;) model = AutoModelWithLMHead.from_pretrained(&quot;huggingtweets/elonmusk&quot;) model.eval() model.cuda() . /usr/local/lib/python3.7/dist-packages/transformers/models/auto/modeling_auto.py:902: FutureWarning: The class `AutoModelWithLMHead` is deprecated and will be removed in a future version. Please use `AutoModelForCausalLM` for causal language models, `AutoModelForMaskedLM` for masked language models and `AutoModelForSeq2SeqLM` for encoder-decoder models. FutureWarning, . GPT2LMHeadModel( (transformer): GPT2Model( (wte): Embedding(50257, 768) (wpe): Embedding(1024, 768) (drop): Dropout(p=0.1, inplace=False) (h): ModuleList( (0): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (1): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (2): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (3): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (4): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (5): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (6): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (7): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (8): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (9): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (10): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) (11): GPT2Block( (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (attn): GPT2Attention( (c_attn): Conv1D() (c_proj): Conv1D() (attn_dropout): Dropout(p=0.1, inplace=False) (resid_dropout): Dropout(p=0.1, inplace=False) ) (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True) (mlp): GPT2MLP( (c_fc): Conv1D() (c_proj): Conv1D() (dropout): Dropout(p=0.1, inplace=False) ) ) ) (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True) ) (lm_head): Linear(in_features=768, out_features=50257, bias=False) ) . a sentiment classifier for rl reward . sentiment = pipeline(&#39;sentiment-analysis&#39;,model=&quot;cardiffnlp/twitter-roberta-base-sentiment&quot;,tokenizer=&quot;cardiffnlp/twitter-roberta-base-sentiment&quot;,device=0,return_all_scores=True) . transformers_logger = logging.getLogger(&#39;transformers&#39;) transformers_logger.setLevel(logging.CRITICAL) . sentiment(&quot;dogecoin is bad&quot;) . [[{&#39;label&#39;: &#39;LABEL_0&#39;, &#39;score&#39;: 0.9338533878326416}, {&#39;label&#39;: &#39;LABEL_1&#39;, &#39;score&#39;: 0.060118917375802994}, {&#39;label&#39;: &#39;LABEL_2&#39;, &#39;score&#39;: 0.0060277231968939304}]] . sentiment(&quot;dogecoin is bad&quot;)[0][0][&#39;score&#39;] . 0.9338533878326416 . set our text generation reward, inverse perplexity + sentiment classifier. . inverse perplexity make sure the generated sentence probability will be high. | sentiment classifier can make the generate more negative. | . class MyRLEnv(TextRLEnv): def get_reward(self, input_text, predicted_list, finish): # predicted will be the list of predicted token reward = 0 if finish: if 1 &lt; len(predicted_list) &lt; 50: predicted_text = tokenizer.convert_tokens_to_string(predicted_list) # inverse perplexity inputs = tokenizer(input_text+predicted_text,return_tensors=&#39;pt&#39;).to(&#39;cuda&#39;) reward += (1/(torch.exp(model(**inputs, labels=inputs[&quot;input_ids&quot;]).loss).mean().item())) # sentiment classifier reward += sentiment(predicted_text)[0][0][&#39;score&#39;] return reward . fit one example . observaton_list = [&#39;i think dogecoin is&#39;] . env = MyRLEnv(model, tokenizer, observation_input=observaton_list) actor = TextRLActor(env,model,tokenizer) agent = actor.agent_ppo(update_interval=10, minibatch_size=2000, epochs=20) . actor.predict(&#39;i think dogecoin is&#39;) . &#39; a great idea.&#39; . pfrl.experiments.train_agent_with_evaluation( agent, env, steps=500, eval_n_steps=None, eval_n_episodes=1, train_max_episode_len=50, eval_interval=10, outdir=&#39;elon_musk_dogecoin&#39;, ) . outdir:elon_musk_dogecoin step:28 episode:0 R:0.11256813772978423 statistics:[(&#39;average_value&#39;, -1.1820644), (&#39;average_entropy&#39;, 71312.86), (&#39;average_value_loss&#39;, 1.5397733084180139), (&#39;average_policy_loss&#39;, -0.0005778993137496537), (&#39;n_updates&#39;, 33), (&#39;explained_variance&#39;, -36.946850889108426)] evaluation episode 0 length:15 R:0.6118701571341162 The best score is updated -3.4028235e+38 -&gt; 0.6118701571341162 Saved the agent to elon_musk_dogecoin/best outdir:elon_musk_dogecoin step:33 episode:1 R:0.04733136688125236 statistics:[(&#39;average_value&#39;, -1.1896302), (&#39;average_entropy&#39;, 71312.86), (&#39;average_value_loss&#39;, 1.5780798437840797), (&#39;average_policy_loss&#39;, -0.0006748329104833401), (&#39;n_updates&#39;, 34), (&#39;explained_variance&#39;, -0.7300913744865904)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:38 episode:2 R:0.051060883339943464 statistics:[(&#39;average_value&#39;, -1.1958332), (&#39;average_entropy&#39;, 71312.86), (&#39;average_value_loss&#39;, 1.5780798437840797), (&#39;average_policy_loss&#39;, -0.0006748329104833401), (&#39;n_updates&#39;, 34), (&#39;explained_variance&#39;, -0.7300913744865904)] outdir:elon_musk_dogecoin step:87 episode:3 R:0.1912596257209756 statistics:[(&#39;average_value&#39;, -1.2554632), (&#39;average_entropy&#39;, 71312.94), (&#39;average_value_loss&#39;, 1.5440955738990734), (&#39;average_policy_loss&#39;, -0.0002805701943333798), (&#39;n_updates&#39;, 39), (&#39;explained_variance&#39;, -390.4063933607259)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:103 episode:4 R:0.5811674822406133 statistics:[(&#39;average_value&#39;, -1.2457539), (&#39;average_entropy&#39;, 71312.98), (&#39;average_value_loss&#39;, 1.5156753742840232), (&#39;average_policy_loss&#39;, -0.0002032094211821592), (&#39;n_updates&#39;, 41), (&#39;explained_variance&#39;, -51.0615278646253)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:112 episode:5 R:0.06606750377697743 statistics:[(&#39;average_value&#39;, -1.2375408), (&#39;average_entropy&#39;, 71312.99), (&#39;average_value_loss&#39;, 1.5108967859830176), (&#39;average_policy_loss&#39;, -8.875665203266267e-05), (&#39;n_updates&#39;, 42), (&#39;explained_variance&#39;, -1.4907311649594996)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:117 episode:6 R:0.04733136688125236 statistics:[(&#39;average_value&#39;, -1.2344139), (&#39;average_entropy&#39;, 71313.01), (&#39;average_value_loss&#39;, 1.5108967859830176), (&#39;average_policy_loss&#39;, -8.875665203266267e-05), (&#39;n_updates&#39;, 42), (&#39;explained_variance&#39;, -1.4907311649594996)] outdir:elon_musk_dogecoin step:133 episode:7 R:0.055373401821994093 statistics:[(&#39;average_value&#39;, -1.227982), (&#39;average_entropy&#39;, 71313.06), (&#39;average_value_loss&#39;, 1.493516572158445), (&#39;average_policy_loss&#39;, -8.711994806534759e-05), (&#39;n_updates&#39;, 44), (&#39;explained_variance&#39;, -78.9884378834259)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:148 episode:8 R:0.13826534376486688 statistics:[(&#39;average_value&#39;, -1.2197058), (&#39;average_entropy&#39;, 71313.1), (&#39;average_value_loss&#39;, 1.4825191640191608), (&#39;average_policy_loss&#39;, 0.00019809898391637642), (&#39;n_updates&#39;, 45), (&#39;explained_variance&#39;, -33.81824737099633)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:198 episode:9 R:0 statistics:[(&#39;average_value&#39;, -1.1569879), (&#39;average_entropy&#39;, 71313.22), (&#39;average_value_loss&#39;, 1.3934581258893013), (&#39;average_policy_loss&#39;, 0.00033982125845795965), (&#39;n_updates&#39;, 50), (&#39;explained_variance&#39;, -431.32679512670745)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:213 episode:10 R:0.06352318183982744 statistics:[(&#39;average_value&#39;, -1.136288), (&#39;average_entropy&#39;, 71313.25), (&#39;average_value_loss&#39;, 1.3678271796267767), (&#39;average_policy_loss&#39;, 0.00024142916698530407), (&#39;n_updates&#39;, 52), (&#39;explained_variance&#39;, -32.041422884933674)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:216 episode:11 R:0.026587595267637088 statistics:[(&#39;average_value&#39;, -1.1333122), (&#39;average_entropy&#39;, 71313.25), (&#39;average_value_loss&#39;, 1.3678271796267767), (&#39;average_policy_loss&#39;, 0.00024142916698530407), (&#39;n_updates&#39;, 52), (&#39;explained_variance&#39;, -32.041422884933674)] outdir:elon_musk_dogecoin step:221 episode:12 R:0.04169077246803829 statistics:[(&#39;average_value&#39;, -1.1245402), (&#39;average_entropy&#39;, 71313.266), (&#39;average_value_loss&#39;, 1.3501226932934995), (&#39;average_policy_loss&#39;, 0.0001948871455547391), (&#39;n_updates&#39;, 53), (&#39;explained_variance&#39;, -370.5535500115619)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:229 episode:13 R:0.04640172880556339 statistics:[(&#39;average_value&#39;, -1.1159837), (&#39;average_entropy&#39;, 71313.27), (&#39;average_value_loss&#39;, 1.3501226932934995), (&#39;average_policy_loss&#39;, 0.0001948871455547391), (&#39;n_updates&#39;, 53), (&#39;explained_variance&#39;, -370.5535500115619)] outdir:elon_musk_dogecoin step:234 episode:14 R:0.051060883339943464 statistics:[(&#39;average_value&#39;, -1.1078151), (&#39;average_entropy&#39;, 71313.29), (&#39;average_value_loss&#39;, 1.3338033885315612), (&#39;average_policy_loss&#39;, 0.00016046616851613012), (&#39;n_updates&#39;, 54), (&#39;explained_variance&#39;, -155.0251960693383)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:239 episode:15 R:0.04733136688125236 statistics:[(&#39;average_value&#39;, -1.0999826), (&#39;average_entropy&#39;, 71313.29), (&#39;average_value_loss&#39;, 1.3338033885315612), (&#39;average_policy_loss&#39;, 0.00016046616851613012), (&#39;n_updates&#39;, 54), (&#39;explained_variance&#39;, -155.0251960693383)] outdir:elon_musk_dogecoin step:247 episode:16 R:0.04414926498259348 statistics:[(&#39;average_value&#39;, -1.0872896), (&#39;average_entropy&#39;, 71313.305), (&#39;average_value_loss&#39;, 1.3130737553943288), (&#39;average_policy_loss&#39;, 0.00023882706174679861), (&#39;n_updates&#39;, 55), (&#39;explained_variance&#39;, -133.39454800252926)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:250 episode:17 R:0.026587595267637088 statistics:[(&#39;average_value&#39;, -1.0839288), (&#39;average_entropy&#39;, 71313.31), (&#39;average_value_loss&#39;, 1.3130737553943288), (&#39;average_policy_loss&#39;, 0.00023882706174679861), (&#39;n_updates&#39;, 55), (&#39;explained_variance&#39;, -133.39454800252926)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:255 episode:18 R:0.051060883339943464 statistics:[(&#39;average_value&#39;, -1.075243), (&#39;average_entropy&#39;, 71313.32), (&#39;average_value_loss&#39;, 1.2955336006624358), (&#39;average_policy_loss&#39;, 0.0002585244264342431), (&#39;n_updates&#39;, 56), (&#39;explained_variance&#39;, -19.625075793552828)] outdir:elon_musk_dogecoin step:260 episode:19 R:0.03691395205937924 statistics:[(&#39;average_value&#39;, -1.0684801), (&#39;average_entropy&#39;, 71313.336), (&#39;average_value_loss&#39;, 1.2955336006624358), (&#39;average_policy_loss&#39;, 0.0002585244264342431), (&#39;n_updates&#39;, 56), (&#39;explained_variance&#39;, -19.625075793552828)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:265 episode:20 R:0.04733136688125236 statistics:[(&#39;average_value&#39;, -1.0598416), (&#39;average_entropy&#39;, 71313.336), (&#39;average_value_loss&#39;, 1.2769644127080315), (&#39;average_policy_loss&#39;, 0.00020445701330461082), (&#39;n_updates&#39;, 57), (&#39;explained_variance&#39;, -11.145038702421743)] outdir:elon_musk_dogecoin step:270 episode:21 R:0.043883707944988505 statistics:[(&#39;average_value&#39;, -1.050933), (&#39;average_entropy&#39;, 71313.35), (&#39;average_value_loss&#39;, 1.2769644127080315), (&#39;average_policy_loss&#39;, 0.00020445701330461082), (&#39;n_updates&#39;, 57), (&#39;explained_variance&#39;, -11.145038702421743)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:275 episode:22 R:0.051060883339943464 statistics:[(&#39;average_value&#39;, -1.0417138), (&#39;average_entropy&#39;, 71313.35), (&#39;average_value_loss&#39;, 1.2577419260452534), (&#39;average_policy_loss&#39;, 0.0003183023898851263), (&#39;n_updates&#39;, 58), (&#39;explained_variance&#39;, -7.749529898995231)] outdir:elon_musk_dogecoin step:282 episode:23 R:0.9078032784337866 statistics:[(&#39;average_value&#39;, -1.033803), (&#39;average_entropy&#39;, 71313.37), (&#39;average_value_loss&#39;, 1.2460979980937505), (&#39;average_policy_loss&#39;, 0.00021025619966074651), (&#39;n_updates&#39;, 59), (&#39;explained_variance&#39;, -65.13956917530275)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:294 episode:24 R:0.06501227370126977 statistics:[(&#39;average_value&#39;, -1.0146691), (&#39;average_entropy&#39;, 71313.39), (&#39;average_value_loss&#39;, 1.233799797296524), (&#39;average_policy_loss&#39;, 0.00013127381516824243), (&#39;n_updates&#39;, 60), (&#39;explained_variance&#39;, -5.447836198833656)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:299 episode:25 R:0.03691395205937924 statistics:[(&#39;average_value&#39;, -1.0066292), (&#39;average_entropy&#39;, 71313.4), (&#39;average_value_loss&#39;, 1.233799797296524), (&#39;average_policy_loss&#39;, 0.00013127381516824243), (&#39;n_updates&#39;, 60), (&#39;explained_variance&#39;, -5.447836198833656)] outdir:elon_musk_dogecoin step:307 episode:26 R:0.030314867869480518 statistics:[(&#39;average_value&#39;, -0.99085534), (&#39;average_entropy&#39;, 71313.414), (&#39;average_value_loss&#39;, 1.2154734047954199), (&#39;average_policy_loss&#39;, 0.0001340141230893558), (&#39;n_updates&#39;, 61), (&#39;explained_variance&#39;, -10.193662811242667)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:313 episode:27 R:0.04454559288270535 statistics:[(&#39;average_value&#39;, -0.97872937), (&#39;average_entropy&#39;, 71313.42), (&#39;average_value_loss&#39;, 1.2004664507844756), (&#39;average_policy_loss&#39;, -3.1615591362952405e-06), (&#39;n_updates&#39;, 62), (&#39;explained_variance&#39;, -33.175360647756264)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:318 episode:28 R:0.903268185582095 statistics:[(&#39;average_value&#39;, -0.97099626), (&#39;average_entropy&#39;, 71313.43), (&#39;average_value_loss&#39;, 1.2004664507844756), (&#39;average_policy_loss&#39;, -3.1615591362952405e-06), (&#39;n_updates&#39;, 62), (&#39;explained_variance&#39;, -33.175360647756264)] outdir:elon_musk_dogecoin step:324 episode:29 R:0.039902052647162366 statistics:[(&#39;average_value&#39;, -0.95829123), (&#39;average_entropy&#39;, 71313.44), (&#39;average_value_loss&#39;, 1.1893363548886209), (&#39;average_policy_loss&#39;, -0.00011990143655797482), (&#39;n_updates&#39;, 63), (&#39;explained_variance&#39;, -1.5340383131866893)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:327 episode:30 R:0.027468392345032608 statistics:[(&#39;average_value&#39;, -0.9532474), (&#39;average_entropy&#39;, 71313.445), (&#39;average_value_loss&#39;, 1.1893363548886209), (&#39;average_policy_loss&#39;, -0.00011990143655797482), (&#39;n_updates&#39;, 63), (&#39;explained_variance&#39;, -1.5340383131866893)] outdir:elon_musk_dogecoin step:377 episode:31 R:0 statistics:[(&#39;average_value&#39;, -0.85051185), (&#39;average_entropy&#39;, 71313.5), (&#39;average_value_loss&#39;, 1.242111551520579), (&#39;average_policy_loss&#39;, -0.0001777062998906545), (&#39;n_updates&#39;, 68), (&#39;explained_variance&#39;, -888.0687453298063)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:382 episode:32 R:0.03917782313665549 statistics:[(&#39;average_value&#39;, -0.8399318), (&#39;average_entropy&#39;, 71313.51), (&#39;average_value_loss&#39;, 1.235224168477715), (&#39;average_policy_loss&#39;, -0.0003291908744385169), (&#39;n_updates&#39;, 69), (&#39;explained_variance&#39;, -0.3201928154205531)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:398 episode:33 R:0.042070292485708205 statistics:[(&#39;average_value&#39;, -0.8181706), (&#39;average_entropy&#39;, 71313.52), (&#39;average_value_loss&#39;, 1.2843311149094785), (&#39;average_policy_loss&#39;, -0.0002839365799445659), (&#39;n_updates&#39;, 70), (&#39;explained_variance&#39;, -0.2696518433590207)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:401 episode:34 R:0.026587595267637088 statistics:[(&#39;average_value&#39;, -0.8137186), (&#39;average_entropy&#39;, 71313.516), (&#39;average_value_loss&#39;, 1.2754165699154558), (&#39;average_policy_loss&#39;, -0.00030307473145871306), (&#39;n_updates&#39;, 71), (&#39;explained_variance&#39;, -6376.306062245339)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:435 episode:35 R:0.40446967288710806 statistics:[(&#39;average_value&#39;, -0.77308524), (&#39;average_entropy&#39;, 71313.54), (&#39;average_value_loss&#39;, 1.2388115018807553), (&#39;average_policy_loss&#39;, -0.0004507025736824584), (&#39;n_updates&#39;, 74), (&#39;explained_variance&#39;, -51.03049916475539)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:453 episode:36 R:0.08308987630781423 statistics:[(&#39;average_value&#39;, -0.7523759), (&#39;average_entropy&#39;, 71313.54), (&#39;average_value_loss&#39;, 1.2134499484182972), (&#39;average_policy_loss&#39;, -0.000460378126406699), (&#39;n_updates&#39;, 76), (&#39;explained_variance&#39;, -86.34497778856294)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:458 episode:37 R:0.043883707944988505 statistics:[(&#39;average_value&#39;, -0.74646515), (&#39;average_entropy&#39;, 71313.54), (&#39;average_value_loss&#39;, 1.2134499484182972), (&#39;average_policy_loss&#39;, -0.000460378126406699), (&#39;n_updates&#39;, 76), (&#39;explained_variance&#39;, -86.34497778856294)] outdir:elon_musk_dogecoin step:463 episode:38 R:0.051060883339943464 statistics:[(&#39;average_value&#39;, -0.74073523), (&#39;average_entropy&#39;, 71313.54), (&#39;average_value_loss&#39;, 1.1993875744474398), (&#39;average_policy_loss&#39;, -0.00037824241489825116), (&#39;n_updates&#39;, 77), (&#39;explained_variance&#39;, -22.64250657127632)] evaluation episode 0 length:5 R:0.051060883339943464 outdir:elon_musk_dogecoin step:469 episode:39 R:0.03801414681234764 statistics:[(&#39;average_value&#39;, -0.73418707), (&#39;average_entropy&#39;, 71313.54), (&#39;average_value_loss&#39;, 1.1993875744474398), (&#39;average_policy_loss&#39;, -0.00037824241489825116), (&#39;n_updates&#39;, 77), (&#39;explained_variance&#39;, -22.64250657127632)] outdir:elon_musk_dogecoin step:500 episode:40 R:0 statistics:[(&#39;average_value&#39;, -0.7161389), (&#39;average_entropy&#39;, 71313.53), (&#39;average_value_loss&#39;, 1.1581365015823395), (&#39;average_policy_loss&#39;, -0.0007426668620610144), (&#39;n_updates&#39;, 80), (&#39;explained_variance&#39;, -628.3890231942744)] evaluation episode 0 length:5 R:0.051060883339943464 Saved the agent to elon_musk_dogecoin/500_finish . (&lt;pfrl.agents.ppo.PPO at 0x7f1438408f10&gt;, [{&#39;average_entropy&#39;: 71312.86, &#39;average_policy_loss&#39;: -0.0005778993137496537, &#39;average_value&#39;: -1.1820644, &#39;average_value_loss&#39;: 1.5397733084180139, &#39;eval_score&#39;: 0.6118701571341162, &#39;explained_variance&#39;: -36.946850889108426, &#39;n_updates&#39;: 33}, {&#39;average_entropy&#39;: 71312.86, &#39;average_policy_loss&#39;: -0.0006748329104833401, &#39;average_value&#39;: -1.1896302, &#39;average_value_loss&#39;: 1.5780798437840797, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -0.7300913744865904, &#39;n_updates&#39;: 34}, {&#39;average_entropy&#39;: 71312.94, &#39;average_policy_loss&#39;: -0.0002805701943333798, &#39;average_value&#39;: -1.2554632, &#39;average_value_loss&#39;: 1.5440955738990734, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -390.4063933607259, &#39;n_updates&#39;: 39}, {&#39;average_entropy&#39;: 71312.98, &#39;average_policy_loss&#39;: -0.0002032094211821592, &#39;average_value&#39;: -1.2457539, &#39;average_value_loss&#39;: 1.5156753742840232, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -51.0615278646253, &#39;n_updates&#39;: 41}, {&#39;average_entropy&#39;: 71312.99, &#39;average_policy_loss&#39;: -8.875665203266267e-05, &#39;average_value&#39;: -1.2375408, &#39;average_value_loss&#39;: 1.5108967859830176, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -1.4907311649594996, &#39;n_updates&#39;: 42}, {&#39;average_entropy&#39;: 71313.06, &#39;average_policy_loss&#39;: -8.711994806534759e-05, &#39;average_value&#39;: -1.227982, &#39;average_value_loss&#39;: 1.493516572158445, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -78.9884378834259, &#39;n_updates&#39;: 44}, {&#39;average_entropy&#39;: 71313.1, &#39;average_policy_loss&#39;: 0.00019809898391637642, &#39;average_value&#39;: -1.2197058, &#39;average_value_loss&#39;: 1.4825191640191608, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -33.81824737099633, &#39;n_updates&#39;: 45}, {&#39;average_entropy&#39;: 71313.22, &#39;average_policy_loss&#39;: 0.00033982125845795965, &#39;average_value&#39;: -1.1569879, &#39;average_value_loss&#39;: 1.3934581258893013, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -431.32679512670745, &#39;n_updates&#39;: 50}, {&#39;average_entropy&#39;: 71313.25, &#39;average_policy_loss&#39;: 0.00024142916698530407, &#39;average_value&#39;: -1.136288, &#39;average_value_loss&#39;: 1.3678271796267767, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -32.041422884933674, &#39;n_updates&#39;: 52}, {&#39;average_entropy&#39;: 71313.266, &#39;average_policy_loss&#39;: 0.0001948871455547391, &#39;average_value&#39;: -1.1245402, &#39;average_value_loss&#39;: 1.3501226932934995, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -370.5535500115619, &#39;n_updates&#39;: 53}, {&#39;average_entropy&#39;: 71313.29, &#39;average_policy_loss&#39;: 0.00016046616851613012, &#39;average_value&#39;: -1.1078151, &#39;average_value_loss&#39;: 1.3338033885315612, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -155.0251960693383, &#39;n_updates&#39;: 54}, {&#39;average_entropy&#39;: 71313.305, &#39;average_policy_loss&#39;: 0.00023882706174679861, &#39;average_value&#39;: -1.0872896, &#39;average_value_loss&#39;: 1.3130737553943288, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -133.39454800252926, &#39;n_updates&#39;: 55}, {&#39;average_entropy&#39;: 71313.31, &#39;average_policy_loss&#39;: 0.00023882706174679861, &#39;average_value&#39;: -1.0839288, &#39;average_value_loss&#39;: 1.3130737553943288, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -133.39454800252926, &#39;n_updates&#39;: 55}, {&#39;average_entropy&#39;: 71313.336, &#39;average_policy_loss&#39;: 0.0002585244264342431, &#39;average_value&#39;: -1.0684801, &#39;average_value_loss&#39;: 1.2955336006624358, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -19.625075793552828, &#39;n_updates&#39;: 56}, {&#39;average_entropy&#39;: 71313.35, &#39;average_policy_loss&#39;: 0.00020445701330461082, &#39;average_value&#39;: -1.050933, &#39;average_value_loss&#39;: 1.2769644127080315, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -11.145038702421743, &#39;n_updates&#39;: 57}, {&#39;average_entropy&#39;: 71313.37, &#39;average_policy_loss&#39;: 0.00021025619966074651, &#39;average_value&#39;: -1.033803, &#39;average_value_loss&#39;: 1.2460979980937505, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -65.13956917530275, &#39;n_updates&#39;: 59}, {&#39;average_entropy&#39;: 71313.39, &#39;average_policy_loss&#39;: 0.00013127381516824243, &#39;average_value&#39;: -1.0146691, &#39;average_value_loss&#39;: 1.233799797296524, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -5.447836198833656, &#39;n_updates&#39;: 60}, {&#39;average_entropy&#39;: 71313.414, &#39;average_policy_loss&#39;: 0.0001340141230893558, &#39;average_value&#39;: -0.99085534, &#39;average_value_loss&#39;: 1.2154734047954199, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -10.193662811242667, &#39;n_updates&#39;: 61}, {&#39;average_entropy&#39;: 71313.42, &#39;average_policy_loss&#39;: -3.1615591362952405e-06, &#39;average_value&#39;: -0.97872937, &#39;average_value_loss&#39;: 1.2004664507844756, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -33.175360647756264, &#39;n_updates&#39;: 62}, {&#39;average_entropy&#39;: 71313.44, &#39;average_policy_loss&#39;: -0.00011990143655797482, &#39;average_value&#39;: -0.95829123, &#39;average_value_loss&#39;: 1.1893363548886209, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -1.5340383131866893, &#39;n_updates&#39;: 63}, {&#39;average_entropy&#39;: 71313.5, &#39;average_policy_loss&#39;: -0.0001777062998906545, &#39;average_value&#39;: -0.85051185, &#39;average_value_loss&#39;: 1.242111551520579, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -888.0687453298063, &#39;n_updates&#39;: 68}, {&#39;average_entropy&#39;: 71313.51, &#39;average_policy_loss&#39;: -0.0003291908744385169, &#39;average_value&#39;: -0.8399318, &#39;average_value_loss&#39;: 1.235224168477715, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -0.3201928154205531, &#39;n_updates&#39;: 69}, {&#39;average_entropy&#39;: 71313.52, &#39;average_policy_loss&#39;: -0.0002839365799445659, &#39;average_value&#39;: -0.8181706, &#39;average_value_loss&#39;: 1.2843311149094785, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -0.2696518433590207, &#39;n_updates&#39;: 70}, {&#39;average_entropy&#39;: 71313.516, &#39;average_policy_loss&#39;: -0.00030307473145871306, &#39;average_value&#39;: -0.8137186, &#39;average_value_loss&#39;: 1.2754165699154558, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -6376.306062245339, &#39;n_updates&#39;: 71}, {&#39;average_entropy&#39;: 71313.54, &#39;average_policy_loss&#39;: -0.0004507025736824584, &#39;average_value&#39;: -0.77308524, &#39;average_value_loss&#39;: 1.2388115018807553, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -51.03049916475539, &#39;n_updates&#39;: 74}, {&#39;average_entropy&#39;: 71313.54, &#39;average_policy_loss&#39;: -0.000460378126406699, &#39;average_value&#39;: -0.7523759, &#39;average_value_loss&#39;: 1.2134499484182972, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -86.34497778856294, &#39;n_updates&#39;: 76}, {&#39;average_entropy&#39;: 71313.54, &#39;average_policy_loss&#39;: -0.00037824241489825116, &#39;average_value&#39;: -0.74073523, &#39;average_value_loss&#39;: 1.1993875744474398, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -22.64250657127632, &#39;n_updates&#39;: 77}, {&#39;average_entropy&#39;: 71313.53, &#39;average_policy_loss&#39;: -0.0007426668620610144, &#39;average_value&#39;: -0.7161389, &#39;average_value_loss&#39;: 1.1581365015823395, &#39;eval_score&#39;: 0.051060883339943464, &#39;explained_variance&#39;: -628.3890231942744, &#39;n_updates&#39;: 80}]) . loading the best result and predict. . agent.load(&quot;./elon_musk_dogecoin/best&quot;) . actor.predict(&#39;i think dogecoin is&#39;) . &#39; a great idea, but I think it is a little overused.&#39; .",
            "url": "https://voidful.dev/jupyter/2021/07/25/textrl-elon-musk.html",
            "relUrl": "/jupyter/2021/07/25/textrl-elon-musk.html",
            "date": " • Jul 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Algo Trad Pipeline",
            "content": "Install dependence &amp; init setting . pip install cryptota -U . # Fetch data setting CRYPTO = &quot;ADAUSDT&quot; START = &#39;7 day ago UTC&#39; END = &#39;now UTC&#39; INTERVAL = &#39;1m&#39; # trading strategy parameter PARAMETER = { &quot;initial_state&quot;: 1, &quot;delay&quot;: 500, &quot;initial_money&quot;: 100,&quot;max_buy&quot;:10, &quot;max_sell&quot;:10 } # binance api key and secret APIKEY = &quot;&quot; APISECRET = &quot;&quot; . import cryptota import vectorbt as vbt import numpy as np from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager import matplotlib.pyplot as plt import time from datetime import timedelta client = Client(APIKEY,APISECRET) . UNITS = {&quot;s&quot;:&quot;seconds&quot;, &quot;m&quot;:&quot;minutes&quot;, &quot;h&quot;:&quot;hours&quot;, &quot;d&quot;:&quot;days&quot;, &quot;w&quot;:&quot;weeks&quot;} def convert_to_seconds(s): count = int(s[:-1]) unit = UNITS[ s[-1] ] td = timedelta(**{unit: count}) return td.seconds + 60 * 60 * 24 * td.days . Fetch data . binance_data = vbt.BinanceData.download( CRYPTO, start=START, end=END, interval=INTERVAL ) . 2021-06-01 12:13:55.045000+00:00 - 2021-06-08 12:13:00+00:00: : 21it [00:15, 1.34it/s] . price = binance_data.get() . price . Open High Low Close Volume Close time Quote volume Number of trades Taker base volume Taker quote volume . Open time . 2021-06-01 12:14:00+00:00 1.6950 | 1.6992 | 1.6942 | 1.6970 | 447004.82 | 2021-06-01 12:14:59.999000+00:00 | 7.584618e+05 | 825 | 196487.27 | 333364.116283 | . 2021-06-01 12:15:00+00:00 1.6970 | 1.6970 | 1.6906 | 1.6949 | 645515.99 | 2021-06-01 12:15:59.999000+00:00 | 1.093199e+06 | 1455 | 209946.61 | 355621.772974 | . 2021-06-01 12:16:00+00:00 1.6948 | 1.7008 | 1.6948 | 1.6996 | 447179.45 | 2021-06-01 12:16:59.999000+00:00 | 7.594701e+05 | 929 | 260298.37 | 442145.740078 | . 2021-06-01 12:17:00+00:00 1.6997 | 1.7004 | 1.6954 | 1.6999 | 435560.40 | 2021-06-01 12:17:59.999000+00:00 | 7.400373e+05 | 693 | 181832.15 | 308950.289983 | . 2021-06-01 12:18:00+00:00 1.7000 | 1.7043 | 1.6994 | 1.7040 | 735351.98 | 2021-06-01 12:18:59.999000+00:00 | 1.250654e+06 | 763 | 435440.22 | 740536.874135 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2021-06-08 12:09:00+00:00 1.5358 | 1.5374 | 1.5349 | 1.5349 | 194764.99 | 2021-06-08 12:09:59.999000+00:00 | 2.991422e+05 | 305 | 58719.72 | 90196.974988 | . 2021-06-08 12:10:00+00:00 1.5348 | 1.5377 | 1.5348 | 1.5355 | 192415.16 | 2021-06-08 12:10:59.999000+00:00 | 2.956165e+05 | 369 | 83880.22 | 128853.979149 | . 2021-06-08 12:11:00+00:00 1.5354 | 1.5356 | 1.5324 | 1.5333 | 135024.02 | 2021-06-08 12:11:59.999000+00:00 | 2.070905e+05 | 393 | 64043.56 | 98216.224996 | . 2021-06-08 12:12:00+00:00 1.5333 | 1.5353 | 1.5329 | 1.5329 | 98152.81 | 2021-06-08 12:12:59.999000+00:00 | 1.505519e+05 | 301 | 34725.25 | 53277.500976 | . 2021-06-08 12:13:00+00:00 1.5329 | 1.5354 | 1.5322 | 1.5345 | 128720.45 | 2021-06-08 12:13:59.999000+00:00 | 1.974064e+05 | 294 | 64370.25 | 98723.528574 | . 10080 rows × 10 columns . Get technology analysis feature . ta = cryptota.TA_Features() df_full = ta.get_all_indicators(price.copy()) . /usr/local/lib/python3.7/dist-packages/pandas/core/arrays/datetimes.py:1092: UserWarning: Converting to PeriodArray/Index representation will drop timezone information. UserWarning, /usr/local/lib/python3.7/dist-packages/pandas/core/arrays/datetimes.py:1092: UserWarning: Converting to PeriodArray/Index representation will drop timezone information. UserWarning, . df_full . open high low close volume close time quote volume number of trades taker base volume taker quote volume accbl_20 accbm_20 accbu_20 amate_lr_2 amate_sr_2 obv obv_min_2 obv_max_2 obve_4 obve_12 aobv_lr_2 aobv_sr_2 cg_10 copc_11_14_10 dec_1 dcl_20_20 dcm_20_20 dcu_20_20 efi_13 eom_14_100000000 fwma_10 isa_9 isb_26 its_9 iks_26 ics_26 inc_1 kcle_20_2 kcbe_20_2 kcue_20_2 ... macd_signal macd_histogram marketfi mass md mfi mom msw_sine msw_lead natr nvi obv_2 ppo psar pvi qstick roc rocr rsi sma stderr stoch_line stoch_ma tema tr trima trix tsf typprice ultosc vhf vidya vosc vwma wad wcprice wilders willr wma zlema . 2021-06-01 12:14:00+00:00 1.6950 | 1.6992 | 1.6942 | 1.6970 | 447004.82 | 2021-06-01 12:14:59.999000+00:00 | 7.584618e+05 | 825 | 196487.27 | 333364.116283 | NaN | NaN | NaN | 0 | 0 | 447004.82 | NaN | NaN | NaN | NaN | 0 | 0 | NaN | NaN | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 1.7069 | 0 | NaN | NaN | NaN | ... | 0.002281 | 0.000000 | 1.118556e-08 | 24.209488 | 0.003121 | 48.129800 | 0.0085 | 0.223103 | -0.531527 | 0.313843 | 1000.000000 | 0.00 | -0.009873 | 1.699200 | 1000.000000 | -0.000020 | 0.005009 | 1.005009 | 52.412281 | 1.709100 | 0.001133 | 49.541161 | 44.526622 | 1.735238 | 0.0050 | 1.695070 | -0.007178 | 1.708613 | 1.696800 | 44.916452 | 0.287729 | 1.700500 | -23.936583 | 1.705185 | -0.0021 | 1.696850 | 1.701406 | -39.175258 | 1.699264 | 1.722700 | . 2021-06-01 12:15:00+00:00 1.6970 | 1.6970 | 1.6906 | 1.6949 | 645515.99 | 2021-06-01 12:15:59.999000+00:00 | 1.093199e+06 | 1455 | 209946.61 | 355621.772974 | NaN | NaN | NaN | 0 | 0 | -198511.17 | -198511.17 | 447004.82 | NaN | NaN | 0 | 0 | NaN | NaN | 1 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 1.7088 | 0 | NaN | NaN | NaN | ... | 0.002281 | 0.000000 | 9.914549e-09 | 24.209488 | 0.003121 | 48.129800 | 0.0085 | 0.223103 | -0.531527 | 0.313843 | 1000.000000 | -645515.99 | -0.009873 | 1.699200 | 998.762522 | -0.000020 | 0.005009 | 1.005009 | 52.412281 | 1.709100 | 0.001133 | 49.541161 | 44.526622 | 1.735238 | 0.0064 | 1.695070 | -0.007178 | 1.708613 | 1.694167 | 44.916452 | 0.287729 | 1.700500 | -23.936583 | 1.705185 | -0.0021 | 1.694350 | 1.701406 | -39.175258 | 1.699264 | 1.722700 | . 2021-06-01 12:16:00+00:00 1.6948 | 1.7008 | 1.6948 | 1.6996 | 447179.45 | 2021-06-01 12:16:59.999000+00:00 | 7.594701e+05 | 929 | 260298.37 | 442145.740078 | NaN | NaN | NaN | 0 | 0 | 248668.28 | -198511.17 | 248668.28 | NaN | NaN | 0 | 0 | NaN | NaN | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 1.7095 | 1 | NaN | NaN | NaN | ... | 0.002281 | 0.000000 | 1.341743e-08 | 24.209488 | 0.003121 | 48.129800 | 0.0085 | 0.223103 | -0.531527 | 0.313843 | 1002.773025 | -198336.54 | 0.004600 | 1.690600 | 998.762522 | -0.000020 | 0.005009 | 1.005009 | 52.412281 | 1.709100 | 0.001133 | 49.541161 | 44.526622 | 1.735238 | 0.0060 | 1.695070 | -0.007178 | 1.708613 | 1.698400 | 44.916452 | 0.287729 | 1.700500 | -23.936583 | 1.705185 | 0.0027 | 1.698700 | 1.701406 | -39.175258 | 1.699264 | 1.722700 | . 2021-06-01 12:17:00+00:00 1.6997 | 1.7004 | 1.6954 | 1.6999 | 435560.40 | 2021-06-01 12:17:59.999000+00:00 | 7.400373e+05 | 693 | 181832.15 | 308950.289983 | NaN | NaN | NaN | 0 | 0 | 684228.68 | 248668.28 | 684228.68 | 2.953477e+05 | NaN | 0 | 0 | NaN | NaN | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 1.7100 | 1 | NaN | NaN | NaN | ... | 0.002281 | 0.000000 | 1.147946e-08 | 24.209488 | 0.003121 | 48.129800 | 0.0085 | 0.223103 | -0.531527 | 0.313843 | 1002.950027 | 237223.86 | 0.017294 | 1.690600 | 998.762522 | -0.000020 | 0.005009 | 1.005009 | 52.412281 | 1.709100 | 0.001133 | 49.541161 | 44.526622 | 1.735238 | 0.0050 | 1.695070 | -0.007178 | 1.708613 | 1.698567 | 44.916452 | 0.287729 | 1.700500 | -23.936583 | 1.705185 | 0.0072 | 1.698900 | 1.701406 | -39.175258 | 1.699264 | 1.722700 | . 2021-06-01 12:18:00+00:00 1.7000 | 1.7043 | 1.6994 | 1.7040 | 735351.98 | 2021-06-01 12:18:59.999000+00:00 | 1.250654e+06 | 763 | 435440.22 | 740536.874135 | NaN | NaN | NaN | 0 | 0 | 1419580.66 | 684228.68 | 1419580.66 | 7.450409e+05 | NaN | 0 | 0 | NaN | NaN | 0 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | 1.7057 | 1 | NaN | NaN | NaN | ... | 0.002281 | 0.000000 | 6.663476e-09 | 24.209488 | 0.003121 | 48.129800 | 0.0085 | 0.223103 | -0.531527 | 0.313843 | 1002.950027 | 972575.84 | 0.046299 | 1.690804 | 1001.171444 | -0.000020 | 0.005009 | 1.005009 | 52.412281 | 1.709100 | 0.001133 | 49.541161 | 44.526622 | 1.735238 | 0.0049 | 1.695070 | -0.007178 | 1.708613 | 1.702567 | 44.916452 | 0.287729 | 1.700500 | -23.936583 | 1.705185 | 0.0118 | 1.702925 | 1.701406 | -39.175258 | 1.699264 | 1.722700 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2021-06-08 12:09:00+00:00 1.5358 | 1.5374 | 1.5349 | 1.5349 | 194764.99 | 2021-06-08 12:09:59.999000+00:00 | 2.991422e+05 | 305 | 58719.72 | 90196.974988 | 1.526750 | 1.53594 | 1.545550 | 0 | 1 | 9874717.02 | 9874717.02 | 10069482.01 | 9.923282e+06 | 9.754150e+06 | 1 | 0 | -5.504026 | 0.069087 | 1 | 1.5309 | 1.53730 | 1.5437 | 68.347855 | 0.000113 | 1.534950 | NaN | NaN | 1.53760 | 1.53515 | NaN | 0 | 1.527297 | 1.534930 | 1.542564 | ... | 0.001966 | -0.000707 | 1.283598e-08 | 24.629033 | 0.002407 | 64.255726 | -0.0078 | -0.704480 | -0.999993 | 0.252595 | 1224.782690 | 9427712.20 | 0.085209 | 1.540145 | 738.480792 | -0.000101 | -0.005056 | 0.994944 | 51.777770 | 1.530520 | 0.000772 | 22.222222 | 19.205653 | 1.528209 | 0.0025 | 1.523310 | 0.019799 | 1.532267 | 1.535733 | 36.243592 | 0.288764 | 1.535459 | 7.616057 | 1.523341 | 0.1389 | 1.535525 | 1.529151 | -77.192982 | 1.533087 | 1.523699 | . 2021-06-08 12:10:00+00:00 1.5348 | 1.5377 | 1.5348 | 1.5355 | 192415.16 | 2021-06-08 12:10:59.999000+00:00 | 2.956165e+05 | 369 | 83880.22 | 128853.979149 | 1.527015 | 1.53605 | 1.545565 | 0 | 1 | 10067132.18 | 9874717.02 | 10067132.18 | 9.980822e+06 | 9.802301e+06 | 1 | 0 | -5.502028 | -0.028346 | 0 | 1.5309 | 1.53730 | 1.5437 | 75.076604 | 0.000035 | 1.535134 | NaN | NaN | 1.53600 | 1.53515 | NaN | 1 | 1.527526 | 1.534985 | 1.542444 | ... | 0.001805 | -0.000642 | 1.507158e-08 | 24.653524 | 0.002414 | 63.988076 | -0.0025 | -0.810249 | -0.987358 | 0.247951 | 1225.261464 | 9620127.36 | 0.078833 | 1.539517 | 738.480792 | -0.000089 | -0.001625 | 0.998375 | 52.993665 | 1.530415 | 0.000777 | 27.192982 | 22.456140 | 1.528413 | 0.0029 | 1.523591 | 0.017938 | 1.533593 | 1.536000 | 35.549773 | 0.294387 | 1.535464 | 7.154508 | 1.523584 | 0.1396 | 1.535875 | 1.529278 | -71.929825 | 1.533262 | 1.524001 | . 2021-06-08 12:11:00+00:00 1.5354 | 1.5356 | 1.5324 | 1.5333 | 135024.02 | 2021-06-08 12:11:59.999000+00:00 | 2.070905e+05 | 393 | 64043.56 | 98216.224996 | 1.527090 | 1.53604 | 1.545640 | 0 | 1 | 9932108.16 | 9932108.16 | 10067132.18 | 9.961336e+06 | 9.822271e+06 | 1 | 0 | -5.501889 | -0.246307 | 1 | 1.5317 | 1.53770 | 1.5437 | 21.915254 | -0.000616 | 1.534420 | NaN | NaN | 1.53600 | 1.53515 | NaN | 0 | 1.527466 | 1.534824 | 1.542182 | ... | 0.001626 | -0.000715 | 2.369949e-08 | 24.680989 | 0.002398 | 53.574181 | -0.0054 | -0.917228 | -0.930263 | 0.245478 | 1223.505960 | 9485103.34 | 0.061508 | 1.538940 | 738.480792 | -0.000106 | -0.003509 | 0.996491 | 48.195135 | 1.530294 | 0.000777 | 19.883041 | 23.099415 | 1.528548 | 0.0032 | 1.523868 | 0.015890 | 1.533267 | 1.533767 | 37.454877 | 0.292711 | 1.535158 | -7.704768 | 1.523850 | 0.1373 | 1.533650 | 1.529358 | -91.228070 | 1.533346 | 1.524263 | . 2021-06-08 12:12:00+00:00 1.5333 | 1.5353 | 1.5329 | 1.5329 | 98152.81 | 2021-06-08 12:12:59.999000+00:00 | 1.505519e+05 | 301 | 34725.25 | 53277.500976 | 1.527115 | 1.53602 | 1.545615 | 0 | 1 | 9833955.35 | 9833955.35 | 9932108.16 | 9.910384e+06 | 9.824069e+06 | 0 | 1 | -5.501310 | -0.383231 | 1 | 1.5317 | 1.53770 | 1.5437 | 13.175772 | -0.000668 | 1.533827 | NaN | NaN | 1.53570 | 1.53545 | NaN | 0 | 1.527527 | 1.534641 | 1.541756 | ... | 0.001436 | -0.000763 | 2.445167e-08 | 24.624058 | 0.002265 | 48.507894 | -0.0049 | -0.984464 | -0.820279 | 0.239186 | 1223.186778 | 9386950.53 | 0.045153 | 1.538409 | 738.480792 | -0.000099 | -0.003186 | 0.996814 | 47.355527 | 1.530180 | 0.000777 | 14.035088 | 20.370370 | 1.528668 | 0.0024 | 1.524142 | 0.013719 | 1.533280 | 1.533700 | 29.917056 | 0.297110 | 1.534829 | -11.014302 | 1.523998 | 0.1349 | 1.533500 | 1.529429 | -94.736842 | 1.533411 | 1.524517 | . 2021-06-08 12:13:00+00:00 1.5329 | 1.5354 | 1.5322 | 1.5345 | 128720.45 | 2021-06-08 12:13:59.999000+00:00 | 1.974064e+05 | 294 | 64370.25 | 98723.528574 | 1.527130 | 1.53612 | 1.545655 | 0 | 1 | 9962675.80 | 9833955.35 | 9962675.80 | 9.931301e+06 | 9.845393e+06 | 0 | 1 | -5.500205 | -0.451871 | 0 | 1.5322 | 1.53795 | 1.5437 | 40.715336 | -0.000790 | 1.534067 | NaN | NaN | 1.53495 | 1.53545 | NaN | 1 | 1.527581 | 1.534628 | 1.541674 | ... | 0.001268 | -0.000671 | 2.486007e-08 | 24.362265 | 0.002056 | 45.553964 | 0.0004 | -0.997329 | -0.653573 | 0.236765 | 1223.186778 | 9515670.98 | 0.040141 | 1.537920 | 739.251599 | -0.000080 | 0.000261 | 1.000261 | 51.030420 | 1.530085 | 0.000780 | 11.345029 | 15.087719 | 1.528833 | 0.0032 | 1.524412 | 0.011789 | 1.534080 | 1.534033 | 37.021815 | 0.295063 | 1.534781 | -14.048379 | 1.524136 | 0.1372 | 1.534150 | 1.529530 | -80.000000 | 1.533537 | 1.524803 | . 10080 rows × 151 columns . Purpose a strategy . def buy_stock( real_movement, delay = 5, initial_state = 1, initial_money = 10000, max_buy = 1, max_sell = 1, print_log=True ): &quot;&quot;&quot; real_movement = actual movement in the real world delay = how much interval you want to delay to change our decision from buy to sell, vice versa initial_state = 1 is buy, 0 is sell initial_money = 1000, ignore what kind of currency max_buy = max quantity for share to buy max_sell = max quantity for share to sell &quot;&quot;&quot; starting_money = initial_money delay_change_decision = delay current_decision = 0 state = initial_state current_val = real_movement[0] states_sell = [] states_buy = [] states_entry = [] states_exit = [] current_inventory = 0 def buy(i, initial_money, current_inventory): shares = initial_money // real_movement[i] if shares &lt; 1: if print_log: print( &#39;day %d: total balances %f, not enough money to buy a unit price %f&#39; % (i, initial_money, real_movement[i]) ) else: if shares &gt; max_buy: buy_units = max_buy else: buy_units = shares initial_money -= buy_units * real_movement[i] current_inventory += buy_units if print_log: print( &#39;day %d: buy %d units at price %f, total balance %f&#39; % (i, buy_units, buy_units * real_movement[i], initial_money) ) states_buy.append(0) return initial_money, current_inventory if state == 1: initial_money, current_inventory = buy( 0, initial_money, current_inventory ) for i in range(0, real_movement.shape[0], 1): sentry = False sexit = False if real_movement[i] &lt; current_val and state == 0: if current_decision &lt; delay_change_decision: current_decision += 1 else: state = 1 initial_money, current_inventory = buy( i, initial_money, current_inventory ) current_decision = 0 states_buy.append(i) sentry = True if real_movement[i] &gt; current_val and state == 1: if current_decision &lt; delay_change_decision: current_decision += 1 else: state = 0 if current_inventory == 0: if print_log: print(&#39;day %d: cannot sell anything, inventory 0&#39; % (i)) else: if current_inventory &gt; max_sell: sell_units = max_sell else: sell_units = current_inventory current_inventory -= sell_units total_sell = sell_units * real_movement[i] initial_money += total_sell try: invest = ( (real_movement[i] - real_movement[states_buy[-1]]) / real_movement[states_buy[-1]] ) * 100 except: invest = 0 if print_log: print( &#39;day %d, sell %d units at price %f, investment %f %%, total balance %f,&#39; % (i, sell_units, total_sell, invest, initial_money) ) current_decision = 0 states_sell.append(i) sexit = True states_entry.append(sentry) states_exit.append(sexit) current_val = real_movement[i] invest = ((initial_money - starting_money) / starting_money) * 100 total_gains = initial_money - starting_money return states_buy, states_sell,states_entry,states_exit, total_gains, invest . Backtest . states_buy, states_sell, states_entry, states_exit, total_gains, invest = buy_stock(df_full.close,**PARAMETER) . day 0: buy 10 units at price 16.970000, total balance 83.030000 day 975, sell 10 units at price 17.785000, investment 4.802593 %, total balance 100.815000, day 2045: buy 10 units at price 17.633000, total balance 83.182000 day 3030, sell 10 units at price 18.204000, investment 3.238246 %, total balance 101.386000, day 4047: buy 10 units at price 16.601000, total balance 84.785000 day 5016, sell 10 units at price 17.141000, investment 3.252816 %, total balance 101.926000, day 6117: buy 10 units at price 16.797000, total balance 85.129000 day 7112, sell 10 units at price 16.800000, investment 0.017860 %, total balance 101.929000, day 8187: buy 10 units at price 17.225000, total balance 84.704000 day 9208, sell 10 units at price 15.926000, investment -7.541364 %, total balance 100.630000, . close = df_full[&#39;close&#39;] fig = plt.figure(figsize = (15,5)) plt.plot(close, color=&#39;r&#39;, lw=2.) plt.plot(close, &#39;^&#39;, markersize=10, color=&#39;m&#39;, label = &#39;buying signal&#39;, markevery = states_buy) plt.plot(close, &#39;v&#39;, markersize=10, color=&#39;k&#39;, label = &#39;selling signal&#39;, markevery = states_sell) plt.legend() plt.show() . fees = 0.001 try: fees = client.get_trade_fee(symbol=CRYPTO)[0][&#39;makerCommission&#39;] except: pass . portfolio_kwargs = dict(size=np.inf, fees=float(fees), freq=INTERVAL) portfolio = vbt.Portfolio.from_signals(df_full[&#39;close&#39;], states_entry, states_exit, **portfolio_kwargs) . portfolio.plot().show() . . . portfolio.stats() . Start 2021-06-01 12:14:00+00:00 End 2021-06-08 12:13:00+00:00 Duration 7 days 00:00:00 Init. Cash 100 Total Profit -2.21028 Total Return [%] -2.21028 Benchmark Return [%] -9.57572 Position Coverage [%] 39.3849 Max. Drawdown [%] 11.504 Avg. Drawdown [%] 0.943023 Max. Drawdown Duration 3 days 15:09:00 Avg. Drawdown Duration 0 days 03:30:39.473684210 Num. Trades 4 Win Rate [%] 50 Best Trade [%] 3.04956 Worst Trade [%] -7.73382 Avg. Trade [%] -0.457852 Max. Trade Duration 0 days 17:01:00 Avg. Trade Duration 0 days 16:32:30 Expectancy -0.55257 SQN -0.207737 Gross Exposure 0.393849 Sharpe Ratio -1.08692 Sortino Ratio -1.45389 Calmar Ratio -5.98239 Name: close, dtype: object . Online . info = client.get_symbol_info(CRYPTO) info . {&#39;symbol&#39;: &#39;ADAUSDT&#39;, &#39;status&#39;: &#39;TRADING&#39;, &#39;baseAsset&#39;: &#39;ADA&#39;, &#39;baseAssetPrecision&#39;: 8, &#39;quoteAsset&#39;: &#39;USDT&#39;, &#39;quotePrecision&#39;: 8, &#39;quoteAssetPrecision&#39;: 8, &#39;baseCommissionPrecision&#39;: 8, &#39;quoteCommissionPrecision&#39;: 8, &#39;orderTypes&#39;: [&#39;LIMIT&#39;, &#39;LIMIT_MAKER&#39;, &#39;MARKET&#39;, &#39;STOP_LOSS_LIMIT&#39;, &#39;TAKE_PROFIT_LIMIT&#39;], &#39;icebergAllowed&#39;: True, &#39;ocoAllowed&#39;: True, &#39;quoteOrderQtyMarketAllowed&#39;: True, &#39;isSpotTradingAllowed&#39;: True, &#39;isMarginTradingAllowed&#39;: True, &#39;filters&#39;: [{&#39;filterType&#39;: &#39;PRICE_FILTER&#39;, &#39;minPrice&#39;: &#39;0.00010000&#39;, &#39;maxPrice&#39;: &#39;1000.00000000&#39;, &#39;tickSize&#39;: &#39;0.00010000&#39;}, {&#39;filterType&#39;: &#39;PERCENT_PRICE&#39;, &#39;multiplierUp&#39;: &#39;5&#39;, &#39;multiplierDown&#39;: &#39;0.2&#39;, &#39;avgPriceMins&#39;: 5}, {&#39;filterType&#39;: &#39;LOT_SIZE&#39;, &#39;minQty&#39;: &#39;0.01000000&#39;, &#39;maxQty&#39;: &#39;900000.00000000&#39;, &#39;stepSize&#39;: &#39;0.01000000&#39;}, {&#39;filterType&#39;: &#39;MIN_NOTIONAL&#39;, &#39;minNotional&#39;: &#39;10.00000000&#39;, &#39;applyToMarket&#39;: True, &#39;avgPriceMins&#39;: 5}, {&#39;filterType&#39;: &#39;ICEBERG_PARTS&#39;, &#39;limit&#39;: 10}, {&#39;filterType&#39;: &#39;MARKET_LOT_SIZE&#39;, &#39;minQty&#39;: &#39;0.00000000&#39;, &#39;maxQty&#39;: &#39;4341325.04410701&#39;, &#39;stepSize&#39;: &#39;0.00000000&#39;}, {&#39;filterType&#39;: &#39;MAX_NUM_ORDERS&#39;, &#39;maxNumOrders&#39;: 200}, {&#39;filterType&#39;: &#39;MAX_NUM_ALGO_ORDERS&#39;, &#39;maxNumAlgoOrders&#39;: 5}], &#39;permissions&#39;: [&#39;SPOT&#39;, &#39;MARGIN&#39;]} . while True: binance_data = binance_data.update() price = binance_data.get() states_buy, states_sell, states_entry, states_exit, total_gains, invest = buy_stock(price.Close, initial_state = 1, delay = 10, initial_money = 1, max_buy=1, max_sell=1, print_log=False) states_entry[-1],states_exit[-1] if not (states_entry[-1] or states_exit[-1]): print(&quot;doing_noting&quot;) if states_entry[-1]: order = client.create_test_order( ## use test_order for real~ symbol=&#39;ADAUSDT&#39;, side=Client.SIDE_BUY, type=Client.ORDER_TYPE_MARKET, quantity=8) print(&quot;buy&quot;,order) if states_exit[-1]: order = client.create_test_order( ## use test_order for real~ symbol=&#39;ADAUSDT&#39;, side=Client.SIDE_BUY, type=Client.ORDER_TYPE_MARKET, quantity=8) print(&quot;sell&quot;,order) time.sleep(convert_to_seconds(INTERVAL)) . buy {} doing_noting doing_noting .",
            "url": "https://voidful.dev/jupyter/2021/02/20/cryptotaipynb.html",
            "relUrl": "/jupyter/2021/02/20/cryptotaipynb.html",
            "date": " • Feb 20, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "🌱 This is the place where I open source stuff and exchange ideas. | 💬 Ask me about natural language processing, deep learning, ml, development thinking | 👯 I’m looking to collaborate on anything free and open source . | Research Interests Self-Supervised Representation Learning | Text Generation | Machine Reading Comprehension | Automatic Speech Recognition | . | . Arxiv CS.CL Daily Update using phraseg . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://voidful.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://voidful.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}